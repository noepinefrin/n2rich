# Generated by Django 4.2.6 on 2023-11-22 01:25

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import enrichment.helperfunctions
import enrichment.validators


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(max_length=255, unique=True)),
                ('name', models.CharField(max_length=255)),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='EnrichmentSearchRecordModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('searched_task_id', models.CharField(max_length=50, verbose_name='searched_task_id')),
                ('searched_at', models.DateTimeField(auto_now_add=True)),
                ('is_task_id_valid', models.BooleanField(null=True, verbose_name='is_task_id_valid')),
                ('is_permitable_search', models.BooleanField(null=True, verbose_name='is_permitable_search')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='EnrichmentRecordModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('analysed_at', models.DateTimeField(auto_now_add=True)),
                ('enrichment_field', models.CharField(choices=[('Transcription', 'Transcription'), ('Pathways', 'Pathways'), ('Ontologies', 'Ontologies'), ('Diseases/Drugs', 'Diseases/Drugs'), ('Cell Types', 'Cell Types')], default='Ontologies', help_text='Select field which your biomarker candidates will enriched.', max_length=30)),
                ('description', models.CharField(blank=True, help_text='Write a recollective description for enrichment analysis up to 280 character.', max_length=280, null=True)),
                ('gene_list', models.CharField(help_text='Copy your biomarker candidates up to 100 genes.', max_length=500, validators=[enrichment.validators.gene_list_validator])),
                ('task_id', models.CharField(blank=True, max_length=50, null=True, unique=True)),
                ('shareable', models.CharField(choices=[('public', 'Public'), ('private', 'Private')], default='Public', help_text='Your results can be viewed by everyone if is selected public. Otherwise, It requires sign in.', max_length=30, verbose_name='shareable')),
                ('complete', models.BooleanField(default=False, verbose_name='complete')),
                ('success', models.BooleanField(default=False, verbose_name='success')),
                ('result', models.FileField(blank=True, null=True, upload_to=enrichment.helperfunctions.get_upload_path, verbose_name='result')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
